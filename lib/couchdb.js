"use strict"

var HttpClient = require("./couchdb/http_client").HttpClient,
    Database = require("./couchdb/database").Database,
    DesignDocument = require("./couchdb/design_document");

/**
 * Connect to a CouchDb Server.
 * @param {String} uri Location of the couch server.
 * @param {Object} httpClient Optional override for the default http client.
 * @return an instance of CouchServer
 * @type CouchServer
 */
exports.connect = function(uri, httpClient){
    var version;
    var couchServer;

    if (!/\/$/.test(uri)){
        uri = uri + "/";
    }

    if (httpClient === undefined){
        httpClient = new HttpClient();
    }

    httpClient.get(uri, {
        async: false,
        success: function(data, textStatus) {
            if (data && data.couchdb) {
                if (data.couchdb === "Welcome") {
                    version = data.version;
                }
            }
        }
    });

    if (version === undefined) {
        return null;
    }
    
    couchServer = Object.create(CouchServer, {
        /**
         * Location of the couch server
         */
        uri: {
            get: function() {
                return uri;
            }
        },
        /**
         * Version of the couch server to which this instance of CouchServer is connected.
         */
        version: {
            get: function() {
                return version;
            }
        },
        httpClient: {
            get: function() {
                return httpClient;
            },
            set: function(client) {
                httpClient = client;
            }
        }
    });

    return couchServer;
};

function getOptions(success, failure){
    if (typeof success !== "function") {
        throw new Error("Argument error: 'success' must be a function");
    }
    if (failure === undefined) {
        failure = function(client, textStatus, errorThrown){
            throw new Error(client.status + ": " + textStatus);
        };
    }
    return { success: success, error: failure, async: false, dataType: "json" };
}

/**
 * A session with a couch server.
 */
var CouchServer = {
    allDbs: function(){
        var dbs;

        this.httpClient.get(this.uri + "_all_dbs", getOptions(function(data) {
            dbs = data;
        }));

        return dbs;
    },

    /**
     * Determines if this couch server has a database with specified name.
     * @param name Name of database to search for.
     * @return Whether database with name exists.
     * @type Boolean
     */
    hasDb: function(name) {
        var dbs = this.allDbs();
        return this.allDbs().indexOf(name) !== -1;
    },

    /**
     * 
     * @param {String} name Database name
     */
    createDb: function(name){
        var created = false;

        if (typeof name == undefined || name == null || name == "") {
            throw new Error("Argument Expected: name");
        }

        var uri = this.uri + name;

        this.httpClient.put(uri, getOptions(function() { created = true; }, function() { created = false; }));

        return created;
    },

    /**
    * Delete a database
    * @param {String} name Database name
    */
    deleteDb: function(name){
        var deleted = false;

        if (name == undefined || name == null || name == "") {
            throw new Error("Argument Expected: name");
        }

        var uri = this.uri + name;

        this.httpClient.del(uri, {
            success: function() {
                deleted = true;
            },
            error: function() {
                deleted = false;
            },
            async: false
        });

        return deleted;
    },

    /**
     * Retrieve a universal identifier generated by CouchDb.
     * @return a guranteed unique universal identifier
     * @type String
     */
    uuid: function(){
        var self = this;

        this.uuidCache = this.uuidCache || [];
        if (this.uuidCache.length > 0) {
            return this.uuidCache.shift();
        }
        else{
            this.httpClient.get(this.uri + "_uuids?count=100", {
                async: false,
                success: function(data, statusText) {
                    self.uuidCache = data.uuids;
                },
                error: function() {
                    // TODO: What do we do?
                }
            });
            return self.uuidCache.shift();
        }
    },
    /**
     * Get a Database object to work with a database that belongs to this CouchServer.
     * Creates the database if it does not exist.
     * @param name Name of the database.
     * @return Database
     * @type Object
     */
    database: function(name, dontCreate) {
        var db;
        var getUri = (function() { return this.uri; }).bind(this);
        var getHttpClient = (function() { return this.httpClient; }).bind(this);
        var getUuid = (function() { return this.uuid(); }).bind(this);
        name = encodeURIComponent(name);
        
        if (!this.hasDb(name) && !dontCreate){
            this.createDb(name);
        } else {
            return null;
        }

        if (!/\/$/.test(name)){
            name += "/";
        }

        db = Object.create(Database, {
            /**
             * Name of database
             * @type String
             */
            name: {
                get: function() { return name; }
            },
            uri: {
                get: function() { return getUri() + name; }
            },
            httpClient: {
                get: function() { return getHttpClient(); }
            }
        });

        db.uuid = function() {
            return getUuid();
        };
        
        return db;
    }
};

exports.Database = Database;
exports.DesignDocument = DesignDocument;

